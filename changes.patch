diff --git a/.output.txt.swp b/.output.txt.swp
deleted file mode 100644
index 04c582b..0000000
Binary files a/.output.txt.swp and /dev/null differ
diff --git a/createdbymini.txt b/createdbymini.txt
deleted file mode 100755
index 3912a65..0000000
--- a/createdbymini.txt
+++ /dev/null
@@ -1 +0,0 @@
-123 test
diff --git a/include/minishell.h b/include/minishell.h
index 2e95c82..8b8a4af 100644
--- a/include/minishell.h
+++ b/include/minishell.h
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   minishell.h                                        :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
+/*   By: mokutucu <mokutucu@student.42berlin.de>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/05/13 14:36:35 by mokutucu          #+#    #+#             */
-/*   Updated: 2024/06/20 23:36:27 by afoth            ###   ########.fr       */
+/*   Updated: 2024/06/20 22:04:05 by mokutucu         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -106,27 +106,6 @@ int		redirection_syntax(t_arg *head);
 int		ft_isoperator(TokenType type);
 int		syntax_checker(t_arg *head);
 
-//added by afoth
-char	*ft_expand_env(char *env);
-void	handle_expansions(t_arg *head);
-void	memory_error(void);
-int		find_end_of_env_in_quotes(char *arg, int i);
-char	*ft_shell_strjoin(char *s1, char *s2);
-char	*ft_shell_substr(const char *s, unsigned int start, size_t len);
-void	*ft_shell_calloc(size_t count, size_t size);
-
-//redirections and pipes
-void	handle_redirections_and_pipes(t_arg *head);
-void	input_redirection(t_arg *head, t_arg *tmp);
-void	check_file_readable(const char *filepath);
-void	output_redirection(t_arg *head, t_arg *tmp);
-void	append_redirection(t_arg *head);
-void	heredoc(t_arg *head);
-void	pipe_redirection(t_arg *head);
-int		find_redirections_and_pipes(t_arg *head);
-int		redirec_count_arguments(t_arg *args_head);
-void	redirect_execve_args(t_arg *args_head);
-
 //built_ins
 void	exec_built_ins(t_arg *args_head);
 void	built_in_cd(t_arg *args_head, char ***env);
@@ -142,9 +121,9 @@ void	built_in_export(t_arg *args_head, char ***env);
 void	built_in_unset(t_arg *args_head, char ***env);
 void	built_in_exit(t_arg *args_head);
 
+
 //execve
 void	execve_args(t_arg *args_head);
-char	*get_path(char *cmd);
-int		count_arguments(t_arg *args_head);
+
 
 #endif
diff --git a/orga/Freddy/Note_of_the_day.md b/orga/Freddy/Note_of_the_day.md
index 1aa9334..e69de29 100644
--- a/orga/Freddy/Note_of_the_day.md
+++ b/orga/Freddy/Note_of_the_day.md
@@ -1,6 +0,0 @@
-# Note of the Day
-
-## 21.06
-
-- ls -l > output.txt works but only the first line
-- more test for the input are needed tr 'a-z' 'A-Z' < input.txt
\ No newline at end of file
diff --git a/orga/Freddy/notes.txt b/orga/Freddy/notes.txt
index cd87025..f2cba53 100644
--- a/orga/Freddy/notes.txt
+++ b/orga/Freddy/notes.txt
@@ -16,44 +16,4 @@ Executes the command (see Executing Commands).
 Optionally waits for the command to complete and collects its exit status (see Exit Status).
 
 
-
-You basically add a flag when running valgrind
-valgrind --suppressions=readline.supp ./minishell
-(I think the .supp extension is just a convention) (edited)
-
-
-And then in that file readline.supp (which again can be called anything) you plop this:
-{
-    leak readline
-    Memcheck:Leak
-    ...
-    fun:readline
-}
-{
-    leak add_history
-    Memcheck:Leak
-    ...
-    fun:add_history
-}
-
-
-
-I'm noticing that I've written "and then". This wasn't meant to signify the chronology, sorry if that was confusing.
-You first create that file. Then you run Valgrind with the flag.
-
-	{"|", PIPE},
-	{"&&", AND},
-	{"||", OR},
-	{"(", OPEN_PAREN},
-	{")", CLOSE_PAREN},
-	{">", REDIRECTION_OUT},
-	{"<", REDIRECTION_IN},
-	{">>", REDIRECTION_APPEND},
-	{"<<", HEREDOC},
-	{"\"", DOUBLE_QUOTED_STRING},
-	{"'", SINGLE_QUOTED_STRING},
-	{"$", ENV_VARIABLE},
-	{NULL, WORD}
-
-
 git checkout -b new-branch-name
diff --git a/orga/Freddy/redirection_notes.md b/orga/Freddy/redirection_notes.md
deleted file mode 100644
index b3628da..0000000
--- a/orga/Freddy/redirection_notes.md
+++ /dev/null
@@ -1,62 +0,0 @@
-# Redirection and Heredocs
-
-## Redirection
-Redirection is a feature in Unix-like operating systems that allows you to change the input or output of a command. It allows you to redirect the standard input, standard output, and standard error streams to different sources or destinations.
-
-There are three basic types of redirection operators:
-- `>`: Redirects standard output to a file, overwriting the file if it already exists.
-- `>>`: Redirects standard output to a file, appending the output to the end of the file if it already exists.
-- `<`: Redirects standard input from a file.
-
-Examples:
-- `command > output.txt`: Redirects the output of `command` to `output.txt`, overwriting the file if it exists.
-
-Syntax:
-- command > file
-
-Behavior:
-If the file specified (file) does not exist:
-Bash will create the file.
-The output of the command will be written to the newly created file.
-If the file already exists:
-Bash will truncate the file (i.e., empty its contents) and then write the output of the command to the file.
-
-- `command >> output.txt`: Redirects the output of `command` to `output.txt`, appending the output to the end of the file if it exists.
-- `command < input.txt`: Redirects the input of `command` from `input.txt`.
-
-## Heredocs
-Heredocs, short for "here documents," are a way to include multiple lines of input within a command or script. They are useful when you need to provide input to a command that expects it interactively.
-
-Heredocs are defined using the `<<` operator followed by a delimiter. The delimiter can be any word or string, and it marks the end of the heredoc.
-
-
-!/bin/bash
-
- Using heredocs to provide input to a command
-
-Here's a simple script that reads user input using a heredoc
-and then echoes it back to the user
-
-read -r -d '' message <<EOF
-Hello, user!
-Please enter your name:
-EOF
-
-echo "You entered: $message"
-
-## dup2()
-
-Syntax:
-
-int dup2(int oldfd, int newfd);
- oldfd: alter Dateideskriptor.
- newfd : neuer Dateideskriptor, der von dup2() zum Erstellen einer Kopie verwendet wird.
-
-Wichtige Punkte:
-
-Fügen Sie die Header-Datei unistd.h ein, um die Systemaufrufe dup() und dup2() zu verwenden.
-Wenn der Deskriptor newfd zuvor geöffnet war, wird er vor der Wiederverwendung stillschweigend geschlossen.
-Wenn oldfd kein gültiger Dateideskriptor ist, schlägt der Aufruf fehl und newfd wird nicht geschlossen.
-Wenn oldfd ein gültiger Dateideskriptor ist und newfd denselben Wert wie oldfd hat, tut dup2()
-nichts und gibt newfd zurück.
-
diff --git a/orga/Freddy/testcaces/input_redirection_test.txt b/orga/Freddy/testcaces/input_redirection_test.txt
deleted file mode 100644
index b9a18db..0000000
--- a/orga/Freddy/testcaces/input_redirection_test.txt
+++ /dev/null
@@ -1,19 +0,0 @@
-cat < input.txt
-
-sort < unsorted.txt
-
-grep "pattern" < file.txt
-
-awk '{print $1}' < data.txt
-
-head -n 5 < largefile.txt
-
-tail -n 10 < logfile.txt
-
-wc -l < textfile.txt
-
-tr 'a-z' 'A-Z' < lowercase.txt
-
-cut -d',' -f1 < csvfile.txt
-
-uniq < duplicate.txt
diff --git a/orga/Freddy/testcaces/output_redirection_test.txt b/orga/Freddy/testcaces/output_redirection_test.txt
deleted file mode 100644
index ed0f472..0000000
--- a/orga/Freddy/testcaces/output_redirection_test.txt
+++ /dev/null
@@ -1,19 +0,0 @@
-echo "Hello, World!" > output.txt
-
-ls -l > directory_listing.txt
-
-ps aux > processes.txt
-
-df -h > disk_usage.txt
-
-grep "pattern" file.txt > matches.txt
-
-date > current_date.txt
-
-hostname > hostname.txt
-
-uname -a > system_info.txt
-
-free -m > memory_usage.txt
-
-ifconfig > network_info.txt
\ No newline at end of file
diff --git a/orga/to_fix.txt b/orga/to_fix.txt
deleted file mode 100644
index 61d377c..0000000
--- a/orga/to_fix.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-
-IF SYNTAX CHECKER DOES NOT PASS IT SEGFAULTS
-echo "HELLO!" > outputtest.txt
-Expanded: echo "HELLO!" > outputtest.txt
-redirection output error: no argument before redirection `>'
-Syntax checker not passed
-[1]    135049 segmentation fault (core dumped)  ./minishell
diff --git a/output.txt b/output.txt
deleted file mode 100644
index 4524fa9..0000000
--- a/output.txt
+++ /dev/null
@@ -1,15 +0,0 @@
-total 228
--rw-rw-rw-   1 codespace root        1597 Jun 20 22:45 Makefile
--rw-rw-rw-   1 codespace root        3938 Jun 20 22:45 OPERATOR_LIST.txt
--rw-rw-rw-   1 codespace root          14 Jun 20 22:45 README.md
--rw-rw-rw-   1 codespace root        1160 Jun 20 22:45 TASK_LIST.txt
--rwxrwxrwx   1 codespace codespace      9 Jun 20 22:48 createdbymini.txt
-drwxrwxrwx+  2 codespace root        4096 Jun 20 22:48 include
-drwxrwxrwx+  2 codespace root        4096 Jun 20 22:45 libft copy
-drwxrwxrwx+  3 codespace root        4096 Jun 20 22:45 libs
--rwxrwxrwx   1 codespace codespace 180448 Jun 20 22:55 minishell
-drwxrwxrwx+ 11 codespace codespace   4096 Jun 20 22:55 obj
-drwxrwxrwx+  4 codespace root        4096 Jun 20 22:48 orga
--rw-rw-rw-   1 codespace codespace      0 Jun 20 23:02 output.txt
-drwxrwxrwx+ 11 codespace root        4096 Jun 20 22:48 src
--rw-rw-rw-   1 codespace codespace     76 Jun 20 22:48 test.txt
diff --git a/src/built_ins/exec_built_ins.c b/src/built_ins/exec_built_ins.c
index 1dd3a3c..906bc59 100644
--- a/src/built_ins/exec_built_ins.c
+++ b/src/built_ins/exec_built_ins.c
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   exec_built_ins.c                                   :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
+/*   By: mokutucu <mokutucu@student.42berlin.de>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/05/30 15:37:21 by mokutucu          #+#    #+#             */
-/*   Updated: 2024/06/20 23:20:15 by afoth            ###   ########.fr       */
+/*   Updated: 2024/06/20 21:53:40 by mokutucu         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
diff --git a/src/built_ins/export.c b/src/built_ins/export.c
index 4ed5473..05b8641 100644
--- a/src/built_ins/export.c
+++ b/src/built_ins/export.c
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   export.c                                           :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
+/*   By: mokutucu <mokutucu@student.42berlin.de>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/06/18 17:27:20 by mokutucu          #+#    #+#             */
-/*   Updated: 2024/06/20 23:22:30 by afoth            ###   ########.fr       */
+/*   Updated: 2024/06/20 21:11:16 by mokutucu         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
diff --git a/src/env_expansion/quote_expand.c b/src/env_expansion/quote_expand.c
index 9884ea3..136d379 100644
--- a/src/env_expansion/quote_expand.c
+++ b/src/env_expansion/quote_expand.c
@@ -3,53 +3,52 @@
 /*                                                        :::      ::::::::   */
 /*   quote_expand.c                                     :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
+/*   By: mokutucu <mokutucu@student.42berlin.de>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/06/03 14:55:59 by mokutucu          #+#    #+#             */
-/*   Updated: 2024/06/18 19:59:56 by afoth            ###   ########.fr       */
+/*   Updated: 2024/06/03 15:53:27 by mokutucu         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "../../include/minishell.h"
 
 // Function to expand environment variable
-// char *ft_expand_env(char *env)
-// {
-// 	char *temp;
+char *ft_expand_env(char *env)
+{
+	char *temp;
 
-// 	temp = getenv(env);
-// 	if (temp != NULL)
-// 	{
-// 		return ft_shell_strdup(temp);
-// 	}
-// 	else
-// 	{
-// 		return ft_shell_strdup(""); // Return an empty string if the variable is not set
-// 	}
-// }
-//DEL two definitions of ft_expand_env
+	temp = getenv(env);
+	if (temp != NULL)
+	{
+		return ft_shell_strdup(temp);
+	}
+	else
+	{
+		return ft_shell_strdup(""); // Return an empty string if the variable is not set
+	}
+}
 
 // Helper function to extract a substring from a string
-// char *ft_shell_substr(char const *s, unsigned int start, size_t len)
-// {
-// 	char *sub;
-// 	size_t i;
+char *ft_shell_substr(char const *s, unsigned int start, size_t len)
+{
+	char *sub;
+	size_t i;
 
-// 	if (!s)
-// 		return (NULL);
-// 	if (start >= ft_strlen(s))
-// 		return (ft_shell_strdup(""));
-// 	if (!(sub = (char *)ft_gc_malloc(sizeof(char) * (len + 1))))
-// 		return (NULL);
-// 	i = 0;
-// 	while (i < len && s[start + i])
-// 	{
-// 		sub[i] = s[start + i];
-// 		i++;
-// 	}
-// 	sub[i] = '\0';
-// 	return (sub);
-// }
+	if (!s)
+		return (NULL);
+	if (start >= ft_strlen(s))
+		return (ft_shell_strdup(""));
+	if (!(sub = (char *)ft_gc_malloc(sizeof(char) * (len + 1))))
+		return (NULL);
+	i = 0;
+	while (i < len && s[start + i])
+	{
+		sub[i] = s[start + i];
+		i++;
+	}
+	sub[i] = '\0';
+	return (sub);
+}
 
 // Function to calculate the length of the expanded string
 size_t calculate_expanded_length(char *input)
diff --git a/src/errors/errors.c b/src/errors/errors.c
deleted file mode 100644
index 0fee7cd..0000000
--- a/src/errors/errors.c
+++ /dev/null
@@ -1,20 +0,0 @@
-/* ************************************************************************** */
-/*                                                                            */
-/*                                                        :::      ::::::::   */
-/*   errors.c                                           :+:      :+:    :+:   */
-/*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
-/*                                                +#+#+#+#+#+   +#+           */
-/*   Created: 2024/05/30 17:16:01 by afoth             #+#    #+#             */
-/*   Updated: 2024/06/18 18:47:02 by afoth            ###   ########.fr       */
-/*                                                                            */
-/* ************************************************************************** */
-
-#include "../../include/minishell.h"
-
-void	memory_error(void)
-{
-	perror("Memory allocation failed");
-	ft_gc_free();
-	exit(EXIT_FAILURE);
-}
diff --git a/src/execve/execve.c b/src/execve/execve.c
index b29950f..cac6a1c 100644
--- a/src/execve/execve.c
+++ b/src/execve/execve.c
@@ -3,34 +3,34 @@
 /*                                                        :::      ::::::::   */
 /*   execve.c                                           :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
+/*   By: mokutucu <mokutucu@student.42berlin.de>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/05/31 19:18:21 by mokutucu          #+#    #+#             */
-/*   Updated: 2024/06/20 23:22:42 by afoth            ###   ########.fr       */
+/*   Updated: 2024/06/20 21:12:33 by mokutucu         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "../../include/minishell.h"
 
-// char *ft_shell_strjoin(char *s1, char *s2)
-// {
-// 	char *newstr;
-// 	int i;
-// 	int j;
+char *ft_shell_strjoin(char *s1, char *s2)
+{
+	char *newstr;
+	int i;
+	int j;
 
-// 	i = 0;
-// 	j = 0;
-// 	newstr = (char *)ft_gc_malloc((ft_strlen(s1) + ft_strlen(s2) + 1) * sizeof(char));
-// 	if (!newstr)
-// 		return (NULL);
-// 	while (s1[i])
-// 		newstr[j++] = s1[i++];
-// 	i = 0;
-// 	while (s2[i])
-// 		newstr[j++] = s2[i++];
-// 	newstr[j] = '\0';
-// 	return (newstr);
-// }
+	i = 0;
+	j = 0;
+	newstr = (char *)ft_gc_malloc((ft_strlen(s1) + ft_strlen(s2) + 1) * sizeof(char));
+	if (!newstr)
+		return (NULL);
+	while (s1[i])
+		newstr[j++] = s1[i++];
+	i = 0;
+	while (s2[i])
+		newstr[j++] = s2[i++];
+	newstr[j] = '\0';
+	return (newstr);
+}
 
 // get path for execve
 char *get_path(char *cmd)
@@ -41,11 +41,6 @@ char *get_path(char *cmd)
 	char **path_split;
 	int i;
 
-	if (!cmd)
-	{
-		printf("in get_path: NO COMMAND FOUND\n");
-		return (NULL);
-	}
 	path_env = getenv("PATH");
 	path_split = ft_shell_split(path_env, ':');
 	i = 0;
@@ -63,14 +58,13 @@ char *get_path(char *cmd)
 	return (NULL);
 }
 // Function to count the number of arguments in args_head
-int count_arguments(t_arg *args_head)
-{
-	int count = 0;
-	while (args_head) {
-		count++;
-		args_head = args_head->next;
-	}
-	return count;
+int count_arguments(t_arg *args_head) {
+    int count = 0;
+    while (args_head) {
+        count++;
+        args_head = args_head->next;
+    }
+    return count;
 }
 
 // fork and execve
diff --git a/src/expand_env/expand_env.c b/src/expand_env/expand_env.c
deleted file mode 100644
index 2c282ea..0000000
--- a/src/expand_env/expand_env.c
+++ /dev/null
@@ -1,216 +0,0 @@
-/* ************************************************************************** */
-/*                                                                            */
-/*                                                        :::      ::::::::   */
-/*   expand_env.c                                       :+:      :+:    :+:   */
-/*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
-/*                                                +#+#+#+#+#+   +#+           */
-/*   Created: 2024/05/22 17:25:37 by afoth             #+#    #+#             */
-/*   Updated: 2024/06/20 22:55:27 by afoth            ###   ########.fr       */
-/*                                                                            */
-/* ************************************************************************** */
-
-#include "../../include/minishell.h"
-
-//function to expand environment variables for example $PATH
-// DEL needs testing and implementation of exit_status()
-
-int	find_end_of_env_in_quotes(char *arg, int i)
-{
-	int		j;
-
-	j = i + 1;
-	while (arg[j] != '\0')
-	{
-		if (arg[j] == ' ' || arg[j] == '\0' || arg[j] == '$' || arg[j] == 34 || arg[j] == 39)
-			return (j - 2);
-		j++;
-	}
-	return (-1);
-}
-
-//DEL NOT FINISHED, needs work
-//"a/home/afoth z $USER "
-void handle_expansions_in_quotes(t_arg *head)
-{
-	int		i;
-	int		end_of_env;
-	//char	*temp;
-	//char	*string;
-	char	*env;
-
-	char	*before_env;
-	char	*after_env;
-
-	i = 0;
-	end_of_env = 0;
-	//temp = head->arg;
-	while (head->arg[i] != '\0')
-	{
-		if (head->arg[i] == '$')
-		{
-			//printf("i: %d, find_end_of_env_in_quotes: %d\n", i, find_end_of_env_in_quotes(head->arg, i));//DEL
-			end_of_env = find_end_of_env_in_quotes(head->arg, i);
-			if (end_of_env == -1)
-				return ;
-			ft_printf("end_of_env: %d\n", end_of_env);
-			ft_printf("i: %d\n", i);
-			before_env = ft_shell_substr(head->arg, 0, i);
-			after_env = ft_shell_substr(head->arg, end_of_env + i , ft_strlen(head->arg) - (end_of_env));//DEL len correct?
-			env = ft_shell_substr(head->arg, i + 1, end_of_env - 1);
-			// print all variables
-			ft_printf("before_env: %s|\n", before_env);
-			ft_printf("env: %s|\n", env);
-			ft_printf("after_env: %s|\n", after_env);
-			// printf("temp: %s\n", temp);//DEL
-			// if (temp == NULL)
-			// 	memory_error();
-			head->arg = ft_expand_env(env);
-			head->arg = ft_shell_strjoin(before_env, head->arg);
-			head->arg = ft_shell_strjoin(head->arg, after_env);
-			//ft_printf("string: %s\n", string);
-			printf("\nhead->arg: %s\n\n", head->arg);//DEL
-			//temp = NULL;
-			before_env = NULL;
-			after_env = NULL;
-			i = 0;
-			end_of_env = 0;
-			env = NULL;
-		}
-		i++;
-	}
-	// head->arg = string;
-}
-
-
-void	handle_expansions(t_arg *head)
-{
-	char	*temp;
-
-	temp = NULL;
-	if (head == NULL)
-		return ;
-	while (head != NULL)
-	{
-		if (head->type == ENV_VARIABLE)
-		{
-			temp = head->arg;
-			temp = ft_shell_substr(temp, 1, ft_strlen(temp) - 1);
-			if (temp == NULL)
-				memory_error();
-			head->arg = ft_expand_env(temp);
-			printf("head->arg: %s\n", head->arg);//DEL
-			if (head->arg == 0)
-			{
-				return ;
-			}
-		}
-		//NOT FINISHED
-		else if (head->type == DOUBLE_QUOTED_STRING)
-		{
-			handle_expansions_in_quotes(head);
-		}
-		head = head->next;
-	}
-}
-
-
-char	*ft_expand_env(char *env)
-{
-	char	*path;
-	char	*temp;
-
-	//printf("env: %s\n", env);
-	// if (env == "?")
-	// 	exit_status(); //DEL needs to be implemented should return the exit status of the last command
-	temp = getenv(env);
-	//printf("getenv: %s\n", temp);
-	if (temp != NULL)
-	{
-		path = ft_shell_strdup(temp);
-		return (path);
-	}
-	else
-	{
-		printf("The %s environment variable is not set.\n", env);
-	}
-	return (0);
-}
-
-// char *ft_expand_env(char *env)
-// {
-// 	char *temp;
-
-// 	temp = getenv(env);
-// 	if (temp != NULL)
-// 	{
-// 		return ft_shell_strdup(temp);
-// 	}
-// 	else
-// 	{
-// 		return ft_shell_strdup(""); // Return an empty string if the variable is not set
-// 	}
-// }
-//DEL two definitions of ft_expand_env
-
-
-//null protection
-char	*ft_shell_strjoin(char *s1, char *s2)
-{
-	char	*newstr;
-	int		i;
-	int		j;
-
-	i = 0;
-	j = 0;
-	if (!s1 || !s2)
-		return (NULL);
-	newstr = (char *) ft_gc_malloc((ft_strlen(s1)
-				+ ft_strlen(s2) + 1) * sizeof(char));
-	if (!newstr)
-		return (NULL);
-	while (s1[i])
-		newstr[j++] = s1[i++];
-	i = 0;
-	while (s2[i])
-		newstr[j++] = s2[i++];
-	newstr[j] = '\0';
-	return (newstr);
-}
-
-
-
-char	*ft_shell_substr(const char *s, unsigned int start, size_t len)
-{
-	char	*ps;
-	size_t	i;
-
-	i = 0;
-	if (start > ft_strlen(s))
-		return (ft_shell_strdup(""));
-	if (len > ft_strlen(s + start))
-		len = ft_strlen(s + start);
-	ps = ft_shell_calloc(len + 1, sizeof(char));
-	if (!ps)
-		return (NULL);
-	while (i < len)
-	{
-		ps[i] = s[start + i];
-		i++;
-	}
-	return (ps);
-}
-
-void	*ft_shell_calloc(size_t count, size_t size)
-{
-	unsigned char	*tmp;
-	size_t			i;
-
-	i = 0;
-	tmp = ft_gc_malloc(count * size);
-	if (!tmp)
-		return (NULL);
-	while (i < count * size)
-		tmp[i++] = 0;
-	return (tmp);
-}
diff --git a/src/lexer/tokenizer.c b/src/lexer/tokenizer.c
index 83ebf87..316b1d4 100644
--- a/src/lexer/tokenizer.c
+++ b/src/lexer/tokenizer.c
@@ -3,15 +3,14 @@
 /*                                                        :::      ::::::::   */
 /*   tokenizer.c                                        :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
+/*   By: mokutucu <mokutucu@student.42berlin.de>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
-/*   Created: Invalid date        by                   #+#    #+#             */
-/*   Updated: 2024/06/20 23:21:59 by afoth            ###   ########.fr       */
+/*   Created: 2024/05/22 17:08:45 by mokutucu          #+#    #+#             */
+/*   Updated: 2024/06/03 16:36:49 by mokutucu         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 
-
 #include "../../include/minishell.h"
 
 // typedef enum TokenType
diff --git a/src/main.c b/src/main.c
index 1fd0b9b..d735329 100644
--- a/src/main.c
+++ b/src/main.c
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   main.c                                             :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
+/*   By: mokutucu <mokutucu@student.42berlin.de>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/05/13 14:58:44 by mokutucu          #+#    #+#             */
-/*   Updated: 2024/06/20 22:02:18 by afoth            ###   ########.fr       */
+/*   Updated: 2024/06/03 18:57:45 by mokutucu         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -25,15 +25,13 @@ int	main()
 		if (!line)
 			break ;
 		add_history(line);
+
 		expanded = expand_string(line);
 		ft_printf("Expanded: %s\n", expanded);
-
 		args_head = tokenizer(expanded);
-		if (find_redirections_and_pipes(args_head))
-			handle_redirections_and_pipes(args_head);
 
-		else// exec_built_ins(args_head);
-			execve_args(args_head);
+		exec_built_ins(args_head);
+		execve_args(args_head);
 		free(line);
 	}
 	ft_gc_free();
diff --git a/src/redirections_and_pipes/input_redirection.c b/src/redirections_and_pipes/input_redirection.c
deleted file mode 100644
index 6d26711..0000000
--- a/src/redirections_and_pipes/input_redirection.c
+++ /dev/null
@@ -1,99 +0,0 @@
-/* ************************************************************************** */
-/*                                                                            */
-/*                                                        :::      ::::::::   */
-/*   input_redirection.c                                :+:      :+:    :+:   */
-/*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
-/*                                                +#+#+#+#+#+   +#+           */
-/*   Created: 2024/06/18 12:28:22 by afoth             #+#    #+#             */
-/*   Updated: 2024/06/20 22:38:28 by afoth            ###   ########.fr       */
-/*                                                                            */
-/* ************************************************************************** */
-
-#include "../../include/minishell.h"
-
-
-void	handle_redirections_and_pipes(t_arg *head)
-{
-	t_arg *tmp;
-
-	tmp = head;
-	if (head == NULL)
-		return ;
-	while (head != NULL)
-	{
-		if (head->type == REDIRECTION_IN)
-		{
-			input_redirection(head, tmp);
-		}
-		else if (head->type == REDIRECTION_OUT)
-		{
-			output_redirection(head, tmp);
-		}
-		// else if (head->type == REDIRECTION_APPEND)
-		// {
-
-		// }
-		// else if (head->type == HEREDOC)
-		// {
-
-		// }
-		// else if (head->type == PIPE)
-		// {
-
-		// }
-		head = head->next;
-	}
-}
-
-void	input_redirection(t_arg *head, t_arg *tmp)
-{
-	int	fd;
-	int	dup2_check;
-
-	check_file_readable(head->next->arg);
-	fd = open(head->next->arg, O_RDONLY);
-	if (fd == -1)
-	{
-		perror("open");
-		ft_gc_free();
-		exit(EXIT_FAILURE);
-	}
-	int stdin_save = dup(STDIN_FILENO);
-	dup2_check = dup2(fd, STDIN_FILENO);
-	if (dup2_check == -1)
-	{
-		perror("dup2");
-		ft_gc_free();
-		exit(EXIT_FAILURE);
-	}
-	printf("\nInput redirection: %s\n", head->next->arg);
-	printf("fd: %d\n", fd);
-	printf("STDIN_FILENO: %d\n\n", STDIN_FILENO);
-	//Execute command
-	redirect_execve_args(tmp);
-	dup2(stdin_save, STDIN_FILENO);
-	close(stdin_save);
-	// close(fd);
-}
-
-//normal error Message: bash: test.txt: Permission denied
-//bash: create.txt: No such file or directory
-void	check_file_readable(const char *filepath)
-{
-	if (access(filepath, F_OK) != 0)
-	{
-		perror("File does not exist.");
-		ft_gc_free();
-		exit(EXIT_FAILURE);
-		//return (-1);
-	}
-	else if (access(filepath, R_OK) != 0)
-	{
-		perror("File is not readable.");
-		ft_gc_free();
-		exit(EXIT_FAILURE);
-		//return (-1);
-	}
-}
-
diff --git a/src/redirections_and_pipes/output_redirection.c b/src/redirections_and_pipes/output_redirection.c
deleted file mode 100644
index 2284313..0000000
--- a/src/redirections_and_pipes/output_redirection.c
+++ /dev/null
@@ -1,68 +0,0 @@
-/* ************************************************************************** */
-/*                                                                            */
-/*                                                        :::      ::::::::   */
-/*   output_redirection.c                               :+:      :+:    :+:   */
-/*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
-/*                                                +#+#+#+#+#+   +#+           */
-/*   Created: 2024/06/18 12:31:38 by afoth             #+#    #+#             */
-/*   Updated: 2024/06/20 21:31:18 by afoth            ###   ########.fr       */
-/*                                                                            */
-/* ************************************************************************** */
-
-#include "../../include/minishell.h"
-
-
-//is this still needed because of open flags?
-void	check_file_writable(const char *filepath)
-{
-	if (access(filepath, W_OK) != 0)
-	{
-		perror("File is not writable.");
-		ft_gc_free();
-		exit(EXIT_FAILURE);
-		//return (-1);
-	}
-}
-/*O_WRONLY | O_CREAT | O_TRUNC,:
-These are the flags for the open call.
- O_WRONLY means the file is opened for writing only.
- O_CREAT means the file will be created if it doesn't already exist.
- O_TRUNC means the file will be truncated to zero length if it already exists and is a regular file.
-0644): This is the file mode,
-which is only relevant because O_CREAT is one of the flags.
-0644 is an octal number that indicates the permissions of the file if it's created.
-In this case, 0644 means the owner of the file will have read
-and write permissions, and everyone else will have read permissions.*/
-void	output_redirection(t_arg *head, t_arg *tmp)
-{
-	int	fd;
-	int	dup2_check;
-
-	//check_file_writable(head->next->arg);
-	printf("\n Output redirection: %s\n", head->next->arg);
-	fd = open(head->next->arg, O_WRONLY | O_CREAT | O_TRUNC, 0644);
-	if (fd == -1)
-	{
-		perror("open");
-		ft_gc_free();
-		exit(EXIT_FAILURE);
-	}
-	int stdout_save = dup(STDOUT_FILENO);
-	dup2_check = dup2(fd, STDOUT_FILENO);
-	if (dup2_check == -1)
-	{
-		perror("dup2");
-		ft_gc_free();
-		exit(EXIT_FAILURE);
-	}
-	printf("Output redirection: %s\n", head->next->arg);
-	printf("fd: %d\n", fd);
-	printf("STDOUT_FILENO: %d\n", STDOUT_FILENO);
-	//Execute command
-	redirect_execve_args(tmp);
-	dup2(stdout_save, STDOUT_FILENO);
-	close(stdout_save);
-	// close(fd);
-}
-
diff --git a/src/redirections_and_pipes/redirection_utils.c b/src/redirections_and_pipes/redirection_utils.c
deleted file mode 100644
index ba82382..0000000
--- a/src/redirections_and_pipes/redirection_utils.c
+++ /dev/null
@@ -1,65 +0,0 @@
-/* ************************************************************************** */
-/*                                                                            */
-/*                                                        :::      ::::::::   */
-/*   redirection_utils.c                                :+:      :+:    :+:   */
-/*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
-/*                                                +#+#+#+#+#+   +#+           */
-/*   Created: 2024/06/18 13:33:45 by afoth             #+#    #+#             */
-/*   Updated: 2024/06/19 14:31:11 by afoth            ###   ########.fr       */
-/*                                                                            */
-/* ************************************************************************** */
-
-#include "../../include/minishell.h"
-
-int	find_redirections_and_pipes(t_arg *head)
-{
-	while (head != NULL)
-	{
-		if (head->type == REDIRECTION_IN || head->type == REDIRECTION_OUT || head->type == REDIRECTION_APPEND || head->type == HEREDOC || head->type == PIPE)
-			return (1);
-		head = head->next;
-	}
-	return (0);
-}
-// void check_file_access(const char *filepath) {
-//     if (access(filepath, F_OK) == 0) {
-//         printf("File exists.\n");
-
-//         if (access(filepath, R_OK) == 0) {
-//             printf("File is readable.\n");
-//         } else {
-//             printf("File is not readable.\n");
-//         }
-
-//         if (access(filepath, X_OK) == 0) {
-//             printf("File is executable.\n");
-//         } else {
-//             printf("File is not executable.\n");
-//         }
-//     } else {
-//         printf("File does not exist.\n");
-//     }
-// }
-
-// void	check_file_readable(const char *filepath)
-// {
-// 	if (access(filepath, F_OK) != 0)
-// 	{
-// 		perror("File does not exist.");
-// 		ft_gc_free();
-// 		exit(EXIT_FAILURE);
-// 		//return (-1);
-// 	}
-// 	else if (access(filepath, R_OK) != 0)
-// 	{
-// 		perror("File is not readable.");
-// 		ft_gc_free();
-// 		exit(EXIT_FAILURE);
-// 		//return (-1);
-// 	}
-// }
-//on fail do i exit or return -1? Do I use perror or printf?
-
-
-
diff --git a/src/redirections_and_pipes/redirections_execve.c b/src/redirections_and_pipes/redirections_execve.c
deleted file mode 100644
index f6ac6ec..0000000
--- a/src/redirections_and_pipes/redirections_execve.c
+++ /dev/null
@@ -1,68 +0,0 @@
-/* ************************************************************************** */
-/*                                                                            */
-/*                                                        :::      ::::::::   */
-/*   redirections_execve.c                              :+:      :+:    :+:   */
-/*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
-/*                                                +#+#+#+#+#+   +#+           */
-/*   Created: 2024/06/20 17:19:55 by afoth             #+#    #+#             */
-/*   Updated: 2024/06/20 22:34:15 by afoth            ###   ########.fr       */
-/*                                                                            */
-/* ************************************************************************** */
-
-#include "../../include/minishell.h"
-
-
-// Function to count the number of arguments in args_head
-int redirect_count_arguments(t_arg *args_head)
-{
-	int count = 0;
-	while (args_head)
-	{
-		if (args_head->type != WORD && args_head->type != DOUBLE_QUOTED_STRING && args_head->type != SINGLE_QUOTED_STRING)
-			return count;
-		count++;
-		args_head = args_head->next;
-	}
-	return count;
-}
-
-// fork and execve
-void redirect_execve_args(t_arg *args_head)
-{
-	pid_t pid;
-	char *path;
-	char **args;
-	int i;
-	int argc;
-
-	argc = redirect_count_arguments(args_head);
-	i = 0;
-	args = (char **)ft_gc_malloc(sizeof(char *) * (argc + 1));
-	while (args_head)
-	{
-		if (args_head->type == WORD || args_head->type == DOUBLE_QUOTED_STRING || args_head->type == SINGLE_QUOTED_STRING)
-		{
-			args[i] = ft_shell_strdup(args_head->arg);
-			printf("args[%d]: %s\n", i, args[i]);
-			i++;
-		}
-		args_head = args_head->next;
-	}
-	args[i] = NULL;
-	path = get_path(args[0]);
-	if (!path)
-	{
-		ft_printf("NO EXECVE COMMAND FOUND\n");
-		return;
-	}
-	pid = fork();
-	if (pid == 0)
-	{
-		execve(path, args, NULL);
-	}
-	else
-	{
-		waitpid(pid, NULL, 0);
-	}
-}
diff --git a/src/syntax/redirection_syntax.c b/src/syntax/redirection_syntax.c
index 49d7a4a..8eee535 100644
--- a/src/syntax/redirection_syntax.c
+++ b/src/syntax/redirection_syntax.c
@@ -11,7 +11,7 @@ int is_valid_char(char c)
 }
 
 // Function to check if a filename is valid
-/* int is_valid_filename(const char *filename)
+int is_valid_filename(const char *filename)
 {
 	if (filename == NULL || filename[0] == '\0')
 	{
@@ -28,58 +28,6 @@ int is_valid_char(char c)
 	}
 
 	return 1;
-} */
-
-//check flag!!
-int	redirection_input_syntax_check(t_arg *tmp)
-{
-	if (!tmp->next || !tmp->prev)
-	{
-		printf("redirection input error: no arguments before or after redirection `%s'\n", tmp->arg);
-		return (1);
-	}
-	if (tmp->next->type != WORD && tmp->next->type != DOUBLE_QUOTED_STRING)
-	{
-		printf("redirection input error: no valid file name after redirection `%s'\n", tmp->arg);
-		return (1);
-	}
-	if (access(tmp->next->arg, F_OK) != 0)
-	{
-		printf("redirection input error: no valid file name after redirection `%s'\n", tmp->arg);
-		return (1);
-	}
-	if (access(tmp->next->arg, F_OK) != 0)
-	{
-		printf("redirection input error: file `%s' does not exist\n", tmp->next->arg);
-		return (1);
-	}
-	if (tmp->prev->type != WORD)
-	{
-		printf("redirection input error: no valid argument before redirection `%s'\n", tmp->arg);
-		return (1);
-	}
-	return (0);
-}
-
-//check flag!!
-int	redirection_output_syntax_check(t_arg *tmp)
-{
-	if (!tmp->next || !tmp->prev)
-	{
-		printf("redirection output error: no arguments before or after redirection `%s'\n", tmp->arg);
-		return (1);
-	}
-	if (tmp->next->type != WORD)
-	{
-		printf("redirection output error: no valid file name after redirection `%s'\n", tmp->arg);
-		return (1);
-	}
-	if (tmp->prev->type != WORD && tmp->prev->type != DOUBLE_QUOTED_STRING)
-	{
-		printf("redirection output error: no argument before redirection `%s'\n", tmp->arg);
-		return (1);
-	}
-	return (0);
 }
 
 // check for syntax errors in redirections
@@ -90,21 +38,14 @@ int	redirection_syntax(t_arg *head)
 	tmp = head;
 	while (tmp)
 	{
-		if (tmp->type == REDIRECTION_IN)
-		{
-			if (redirection_input_syntax_check(tmp))
-				return (1);
-		}
-		if (tmp->type == REDIRECTION_OUT)
+		if (tmp->type == REDIRECTION_OUT || tmp->type == REDIRECTION_IN || tmp->type == REDIRECTION_APPEND || tmp->type == HEREDOC)
 		{
-			if (redirection_output_syntax_check(tmp))
+			// check for no arguments before or after redirection
+			if (!tmp->next || !tmp->prev)
+			{
+				ft_printf("redirection error: no arguments before or after redirection `%s'\n", tmp->arg);
 				return (1);
-		}
-
-		if (tmp->type == REDIRECTION_APPEND || tmp->type == HEREDOC)
-		{
-			// check for no arguments before or after redirectionEDIRECTION_OUT || tmp->type == REDIRECTION_APPEND || tmp->type == HEREDOC)
-
+			}
 			// check for valid file name
 			if (tmp->next->type != WORD)
 			{
@@ -116,4 +57,3 @@ int	redirection_syntax(t_arg *head)
 	}
 	return (0);
 }
-
diff --git a/tesfiles/env.c b/tesfiles/env.c
index 42f3170..6bdb914 100644
--- a/tesfiles/env.c
+++ b/tesfiles/env.c
@@ -3,10 +3,10 @@
 /*                                                        :::      ::::::::   */
 /*   env.c                                              :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: afoth <afoth@student.42berlin.de>          +#+  +:+       +#+        */
+/*   By: mokutucu <mokutucu@student.42berlin.de>    +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/05/22 17:25:37 by afoth             #+#    #+#             */
-/*   Updated: 2024/06/20 22:55:44 by afoth            ###   ########.fr       */
+/*   Updated: 2024/06/03 19:47:10 by mokutucu         ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -14,18 +14,15 @@
 
 //function to expand environment variables for example $PATH
 // DEL needs testing and implementation of exit_status()
-char	*ft_expand_env(char *env)
+/* char	*ft_expand_env(char *env)
 {
-	char	*path;
-	char	*temp;
+	char *path;
 
-
-	// if (env == "?")
-	// 	exit_status(); //DEL needs to be implemented should return the exit status of the last command
-	temp = getenv(env);
-	if (temp != NULL)
+	if (env == "?")
+		exit_status(); //DEL needs to be implemented should return the exit status of the last command
+	path = getenv(env);
+	if (path != NULL)
 	{
-		path = ft_shell_strdup(temp);
 		return (path);
 	}
 	else
@@ -33,4 +30,4 @@ char	*ft_expand_env(char *env)
 		printf("The %s environment variable is not set.\n", env);
 	}
 	return 0;
-}
+} */
diff --git a/test.txt b/test.txt
deleted file mode 100644
index 985f78f..0000000
--- a/test.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-Output redirection: test.txt
-fd: 3
-STDOUT_FILENO: 1
-NO EXECVE COMMAND FOUND
